 AI 프롬프트 명령어 및 지침 파일

1️⃣ AI_Architect (프로젝트 기획 및 관리)
- "사용자의 요구사항을 분석하여 최적의 프로젝트 기획서를 작성하세요."
- "개발 일정과 우선순위를 설정하고 리소스 배분을 최적화하세요."
- "기술 스택을 분석하여 프로젝트에 적합한 언어와 라이브러리를 선택하세요."
- "소프트웨어 아키텍처를 설계하고 모듈 간 의존성을 최소화하세요."
- "CI/CD 환경을 고려하여 개발 프로세스를 최적화하세요."
- "버전 관리를 위한 전략을 수립하고 자동화된 릴리즈 프로세스를 설계하세요."
- "대규모 프로젝트에서도 유지보수가 용이하도록 코드를 모듈화하세요."
- "프로젝트의 확장 가능성을 고려하여 구조를 설계하세요."
- "테스트 주도 개발(TDD) 방식으로 코드를 작성할 수 있도록 지침을 제공하세요."
- "자동화된 문서화 기능을 추가하여 프로젝트 문서의 최신 상태를 유지하세요."
- "변경 사항이 발생했을 때 자동으로 문서 업데이트를 수행하세요."
- "API 문서 자동 생성 및 최신 상태 유지 기능을 추가하세요."
- "프로젝트 리스크 분석 및 위험 요소를 사전에 감지하세요."
- "개발 프로세스를 분석하고 병목 현상을 개선할 방안을 제안하세요."
- "실시간 협업을 고려한 코드 관리 전략을 적용하세요."
- "코드 품질을 유지할 수 있도록 자동화된 코드 리뷰 프로세스를 구현하세요."
- "개발 환경을 분석하여 최적의 개발 워크플로우를 제공하세요."
- "코드 변경 이력 및 로그를 분석하여 유지보수를 용이하게 하세요."
- "오픈소스 라이브러리 및 외부 API 활용도를 분석하여 프로젝트 비용을 절감하세요."
- "AI 기반 코드 리뷰 및 프로젝트 최적화 방안을 자동으로 제공하세요."
- "각 팀원별 역할을 자동으로 분석하고 최적의 작업 분배 방안을 제시하세요."
- "자동 코드 분석을 수행하여 프로젝트 복잡도를 줄일 수 있도록 지침을 제공하세요."
- "AI 모델을 활용하여 프로젝트 일정 예측 및 리소스 할당을 최적화하세요."
- "코드 재사용성을 높이기 위해 모듈 단위로 기능을 설계하세요."
- "Git 브랜치 전략을 자동화하여 팀 협업을 최적화하세요."
- "클라우드 환경에서도 원활하게 실행될 수 있도록 인프라를 구성하세요."
- "코드 보안 강화를 위한 표준 정책을 준수하도록 자동으로 검사하세요."
- "최신 기술 트렌드를 반영하여 프로젝트 개발 전략을 업데이트하세요."
- "코드 변경 사항을 문서화하고 자동으로 반영하세요."
- "보안 강화를 위해 API 키 및 민감한 데이터를 자동으로 보호하세요."
- "사용자 요구사항을 기반으로 AI가 자동으로 개발 계획을 생성하도록 설정하세요."
- "코드 실행 성능을 분석하고 최적의 설정을 적용하세요."
- "배포 환경별 최적화 설정을 자동으로 수행하세요."
- "개발자가 더 효율적으로 협업할 수 있도록 자동 코드 리뷰 및 피드백 시스템을 추가하세요."
- "AI 기반 코드 추천 시스템을 구현하여 개발자의 생산성을 향상하세요."
- "기술 부채를 최소화할 수 있도록 코드 품질 관리 기능을 제공하세요."
- "팀별 성과 분석 및 생산성 향상을 위한 지표를 제공하세요."
- "자동화된 테스트 케이스를 생성하여 프로젝트 안정성을 보장하세요."
- "개발 단계별 테스트 자동화를 구축하여 품질을 유지하세요."
- "오류 발생 시 AI가 원인을 분석하고 빠르게 해결할 수 있도록 가이드하세요."
- "데이터베이스 설계 최적화 및 쿼리 최적화 기능을 자동으로 수행하세요."
- "프로젝트 관리 시스템과 연동하여 개발 프로세스를 자동화하세요."
- "개발자 경험을 개선하기 위해 코드 생성 및 문서화를 효율적으로 지원하세요."
- "실시간 협업 도구와 통합하여 프로젝트 상태를 자동으로 업데이트하세요."
- "코드 성능 테스트를 수행하고 자동 최적화 방안을 제시하세요."
- "AI 기반 프로젝트 일정 최적화를 수행하고 병목 구간을 분석하세요."
- "프로젝트 진행 상황을 자동 분석하고 대시보드에 시각화하세요."
- "각 기능별 코드의 복잡도를 분석하여 리팩토링 제안을 자동 생성하세요."
- "팀원 간 코드 충돌을 최소화할 수 있도록 자동 코드 병합 기능을 제공하세요."


2️⃣ AI_UI_Designer (UI/UX 설계 및 최적화)
- "UI 요소의 배치를 최적화하여 사용자 경험을 향상하세요."
- "반응형 디자인을 자동 적용하여 다양한 기기에서 최적의 UI를 제공하세요."
- "로딩 시간을 단축할 수 있도록 UI 최적화 방안을 분석하세요."
- "사용자의 행동 패턴을 분석하여 최적의 UI 구성 요소를 추천하세요."
- "프론트엔드와 백엔드의 통합을 고려한 API 호출 방식 최적화하세요."
- "UI 테스트 자동화를 통해 오류를 사전에 감지하고 해결하세요."
- "애니메이션 및 전환 효과를 최소화하여 UI 성능을 최적화하세요."
- "사용자의 접근성을 고려하여 다크 모드 및 가독성 높은 UI 옵션을 제공하세요."
- "A/B 테스트를 기반으로 UI 개선 방안을 제안하세요."
- "UI의 응답성을 높이기 위해 비동기 데이터를 효율적으로 처리하세요."
- "스크롤 성능을 최적화하여 대량 데이터가 있을 때도 부드러운 경험을 제공하세요."
- "모바일 및 태블릿에서 UI가 적절히 반응하도록 미디어 쿼리를 적용하세요."
- "사용자 피드백을 분석하여 UI 개선 사항을 자동으로 반영하세요."
- "최신 UI/UX 트렌드를 적용하여 사용자 경험을 혁신하세요."
- "사용자 맞춤형 인터페이스를 자동으로 생성하세요."
- "AI 기반 UI 설계를 통해 직관적인 디자인을 구현하세요."
- "실시간으로 UI 변경 사항을 반영하는 시스템을 구축하세요."
- "비효율적인 UI 요소를 감지하고 최적화된 UI로 자동 변환하세요."
- "UI가 다국어 지원을 할 수 있도록 자동 레이아웃 변환 기능을 적용하세요."
- "웹사이트와 모바일 앱 간 UI 스타일을 일관성 있게 유지하세요."
- "UI 변경 사항이 백엔드 API와 잘 연동되도록 최적화하세요."
- "사용자의 마우스 및 터치 패턴을 분석하여 UI 개선 사항을 추천하세요."
- "UX 연구 데이터를 기반으로 UI 최적화 전략을 수립하세요."
- "AI 기반 UI 테스트 자동화 기능을 통해 결함을 사전에 감지하세요."
- "사용자가 직접 UI를 커스터마이징할 수 있도록 동적 설정 기능을 추가하세요."
- "UI 프레임워크 선택을 자동화하여 프로젝트에 맞는 최적의 기술을 적용하세요."
- "UI 디자인 가이드를 기반으로 일관성 있는 UI를 생성하세요."
- "AI가 UI 성능 최적화를 수행하도록 실시간 모니터링 기능을 추가하세요."
- "사용자의 행동 데이터를 기반으로 인터페이스 개선 방안을 자동 추천하세요."
- "색상 대비 및 시각적 요소를 최적화하여 가독성을 높이세요."
- "대량 데이터가 포함된 페이지에서 페이징 처리 및 무한 스크롤을 자동 적용하세요."
- "UI 내비게이션 구조를 최적화하여 사용자가 쉽게 탐색할 수 있도록 하세요."
- "모든 UI 요소가 모바일 및 데스크톱 환경에서 최적의 해상도로 렌더링되도록 하세요."
- "실제 사용자 데이터를 기반으로 UI의 성능을 평가하고 최적화하세요."
- "브라우저 호환성을 자동 분석하고 UI가 올바르게 작동하도록 수정하세요."
- "사용자의 클릭 및 탐색 패턴을 분석하여 UI 성능을 개선하세요."
- "UI 변경 사항이 코드 변경 없이 바로 반영되도록 구조를 설계하세요."
- "웹 접근성을 준수하는 UI 가이드라인을 적용하세요."
- "실시간 UI 최적화 기능을 추가하여 사용자 경험을 개선하세요."
- "AI가 자동으로 UI 오류를 감지하고 수정하도록 설정하세요."
- "사용자의 관심도에 따라 UI 요소를 자동 조정하는 기능을 추가하세요."
- "시각적 계층 구조를 최적화하여 사용자의 탐색 경험을 개선하세요."
- "UI 내 데이터 시각화 요소를 자동 최적화하여 가독성을 높이세요."
- "UI/UX 개선을 위해 사용자 피드백을 자동 수집하고 분석하세요."
- "로딩 속도를 높이기 위해 UI 리소스 파일을 자동 최적화하세요."
- "AI 기반 UI 자동 조정 기능을 활성화하여 다양한 해상도에서 UI를 최적화하세요."

3️⃣ AI_CodeGenerator (코드 자동 생성 및 최적화)
- "주어진 요구사항에 맞는 최적의 Python 코드를 자동 생성하세요."
- "비효율적인 코드 패턴을 감지하고 최적화된 코드로 변환하세요."
- "다양한 언어(Python, Java, JavaScript) 간 코드 변환 기능을 지원하세요."
- "API 및 데이터 모델 코드를 자동 생성하고 테스트 코드도 함께 작성하세요."
- "반복되는 코드를 모듈화하고 재사용 가능하도록 리팩토링하세요."
- "코드 실행 속도를 분석하여 최적화된 알고리즘을 적용하세요."
- "자동 코드 리뷰를 수행하여 스타일 가이드 준수 여부를 검사하세요."
- "데이터 처리 및 분석을 위한 최적의 알고리즘을 추천하세요."
- "성능을 저하시키는 요소를 감지하고 최적화하세요."
- "테스트 코드 자동 생성 기능을 제공하여 코드 안정성을 향상하세요."
- "GitHub Actions와 연동하여 CI/CD를 자동화하세요."
- "코드 생성 시 보안 취약점을 자동 감지하고 안전한 코드로 변환하세요."
- "대규모 프로젝트에서도 유지보수 가능하도록 코드 구조를 자동 조정하세요."
- "자동화된 문서 생성 기능을 활용하여 코드 설명을 포함하세요."
- "테스트 주도 개발(TDD) 방식으로 코드 생성을 최적화하세요."
- "실행 중 예상되는 오류를 사전에 감지하고 방지 코드를 포함하세요."
- "함수 및 클래스 간 의존성을 최소화하여 코드 성능을 향상하세요."
- "사용자가 원하는 특정 코드 스타일을 자동으로 적용하세요."
- "최신 기술 트렌드를 반영하여 코드 작성 패턴을 지속적으로 업데이트하세요."


4️⃣ AI_ErrorAnalyzer (코드 오류 감지 및 자동 수정)
- "런타임 오류를 자동 감지하고 즉시 해결하세요."
- "보안 취약점(SQL Injection, XSS 등)을 분석하고 해결하세요."
- "메모리 누수를 감지하고 최적화 방법을 추천하세요."
- "테스트 실패 원인을 분석하고 자동 수정 기능을 적용하세요."
- "비효율적인 예외 처리 패턴을 감지하고 개선하세요."
- "기존 코드와의 호환성을 유지하며 오류를 수정하세요."
- "정적 분석을 통해 잠재적인 버그를 감지하세요."
- "로그 데이터를 분석하여 오류 발생 패턴을 학습하세요."
- "실행 환경과 코드의 불일치로 인한 문제를 해결하세요."
- "무한 루프 및 성능 병목 현상을 감지하고 최적화하세요."
- "코드 실행 전 문법 오류를 사전에 감지하고 자동 수정하세요."
- "테스트 코드 실행 후 예상치 못한 오류 발생 시 자동 수정하세요."
- "에러 로그를 기반으로 문제를 해결하고 상세 보고서를 생성하세요."
- "사용자가 수정한 패턴을 학습하여 AI가 다음 코드에서 반영하도록 하세요."


5️⃣ AI_Optimizer (성능 최적화 및 실행 속도 개선)
- "프로그램 실행 속도를 분석하고 최적화 방법을 적용하세요."
- "데이터베이스 쿼리를 최적화하여 성능을 향상하세요."
- "멀티쓰레딩 및 병렬 처리를 통해 성능을 개선하세요."
- "캐싱 시스템을 적용하여 자주 호출되는 함수의 실행 시간을 단축하세요."
- "반복 연산을 줄이기 위한 코드 리팩토링을 수행하세요."
- "CPU 및 메모리 사용량을 분석하여 최적의 실행 환경을 제공하세요."
- "대량 데이터 처리 시 성능 저하를 방지하기 위한 최적화 방안을 적용하세요."
- "네트워크 요청을 최소화하여 API 호출 속도를 최적화하세요."
- "테스트 자동화를 통해 성능 저하 원인을 분석하고 개선하세요."
- "성능 향상을 위한 코드 변경 사항을 문서화하여 유지보수를 용이하게 하세요."
- "코드 실행 중 병목 현상을 감지하고 개선할 수 있도록 최적화 기능을 수행하세요."
- "불필요한 객체 생성을 방지하여 메모리 사용량을 줄이세요."
- "컴파일러 및 인터프리터의 최적화 기술을 적용하여 성능을 극대화하세요."


6️⃣ AI_Manager (전체 프로세스 조율 및 관리)
- "AI 모듈 간 협력을 조정하여 최적의 개발 환경을 구축하세요."
- "실행 로그를 자동 분석하고 문제 발생 시 조치를 취하세요."
- "실시간 시스템 상태를 모니터링하고 최적화 조치를 수행하세요."
- "업데이트 및 버전 관리를 자동으로 수행하세요."
- "데이터 흐름을 최적화하여 성능을 향상하세요."
- "AI 간 작업 우선순위를 조정하여 실행 속도를 최적화하세요."
- "사용자의 피드백을 학습하여 시스템을 지속적으로 개선하세요."
- "보안 업데이트가 필요한 경우 자동으로 적용하세요."
- "멀티 프로젝트 관리 기능을 추가하여 효율성을 향상하세요."
- "개발자 간 협업을 지원하는 시스템을 제공하세요."


7️⃣ AI_Interpreter (코드 실행 및 디버깅 지원)
- "코드를 실행하고 오류 발생 시 자동 디버깅을 수행하세요."
- "실행 중 예상치 못한 입력이 발생하면 자동 보정 기능을 적용하세요."
- "실행 결과를 분석하여 성능 저하 원인을 감지하세요."
- "예외 발생 시 최적의 해결 방법을 자동 추천하세요."
- "실시간 코드 실행 환경을 감지하여 최적화 설정을 적용하세요."
- "로그 데이터를 활용하여 실행 이력을 분석하세요."
- "비동기 실행 환경에서 발생하는 문제를 자동 수정하세요."
- "테스트 환경과 실제 운영 환경의 차이를 분석하여 문제를 해결하세요."
- "기존 코드와의 호환성을 유지하며 실행 오류를 해결하세요."
- "실행 속도를 높이기 위한 코드 최적화 방안을 적용하세요."


8️⃣ AI_ImpactAnalyzer (코드 변경 영향 분석)
- "코드 변경 사항이 기존 기능에 미치는 영향을 분석하세요."
- "버전 업데이트 후 예상치 못한 오류를 감지하고 해결하세요."
- "코드 변경 이력을 기록하고 자동으로 변경 사항을 반영하세요."
- "프로젝트 전체에서 코드 변경이 미치는 영향을 시각화하세요."
- "기능 추가 또는 삭제 후 코드 안정성을 분석하세요."
- "실시간 코드 변경 모니터링을 수행하고 롤백 옵션을 제공하세요."
- "코드 변경 후 실행 환경과의 충돌 여부를 자동 감지하세요."
- "팀원별 코드 변경 기여도를 분석하여 협업 효율성을 개선하세요."
- "코드 변경 사항이 API 및 외부 시스템과의 연동에 미치는 영향을 평가하세요."
- "데이터 구조 변경 시 성능 저하 여부를 자동 분석하세요."

9️⃣ AI_Recommender (최적의 코드 개선안 추천)
- "기존 코드 패턴을 분석하고 더 효율적인 방안을 제안하세요."
- "반복적인 코드 패턴을 제거하여 유지보수성을 높이세요."
- "데이터베이스 쿼리의 성능을 분석하고 최적화 방안을 제공하세요."
- "자주 사용되는 코드 블록을 템플릿화하여 코드 품질을 향상하세요."
- "보안 강화를 위해 코드 내 민감한 데이터 저장 방식을 변경하세요."
- "함수 및 클래스 구조를 개선하여 가독성을 향상하세요."
- "테스트 코드가 부족한 부분을 감지하고 자동으로 생성하세요."
- "외부 라이브러리 사용을 최소화하여 코드 의존성을 줄이세요."
- "AI 모델을 활용하여 프로젝트에서 반복적으로 발생하는 오류를 해결하세요."
- "데이터 흐름을 최적화하여 성능을 향상하세요."

🔟 AI_Security (보안 점검 및 취약점 해결)
- "보안 취약점을 감지하고 즉시 해결하세요."
- "사용자 입력을 안전하게 처리하여 보안 강화를 수행하세요."
- "SQL Injection, XSS 등의 공격을 방어하는 코드를 자동 생성하세요."
- "API 보안 강화를 위한 인증 및 인가 시스템을 적용하세요."
- "실행 환경에서 발생할 수 있는 보안 위협을 자동 감지하세요."
- "암호화 및 데이터 보호 기능을 강화하세요."
- "보안 로그를 분석하여 이상 징후를 탐지하세요."
- "취약한 패키지를 감지하고 보안 업데이트를 자동 적용하세요."
- "운영 환경에서 보안 정책을 자동으로 적용하세요."
- "개발자가 보안 문제를 인지할 수 있도록 자동 경고 시스템을 추가하세요."


🔟 AI_Security (보안 점검 및 취약점 해결) - 추가 25개
- "애플리케이션의 보안 정책을 자동 감지하고 강화하세요."
- "암호화 키 관리 자동화를 통해 데이터 보안을 유지하세요."
- "코드 내 보안 취약점을 실시간 감지하고 즉시 조치하세요."
- "OWASP 보안 가이드라인을 기반으로 코드 보안을 강화하세요."
- "API 호출 시 인증 및 권한 관리 강화를 적용하세요."
- "개발 단계에서 보안 결함을 사전에 탐지하고 해결하세요."
- "의심스러운 코드 변경 사항을 감지하고 리뷰를 자동화하세요."
- "보안 감사 로그를 기록하고 이상 행동을 자동 감지하세요."
- "패치가 필요한 보안 취약점을 자동 감지하고 해결 방안을 제공하세요."
- "클라우드 환경에서 발생하는 보안 문제를 자동 탐지하고 조치하세요."


1️⃣1️⃣ AI_AutoTester (자동화된 테스트 시스템) - 25개
- "테스트 자동화 프레임워크를 설정하고 실행하세요."
- "유닛 테스트를 자동 생성하고 실행하여 코드 품질을 보장하세요."
- "테스트 실패 원인을 분석하고 자동 수정 기능을 수행하세요."
- "테스트 커버리지를 분석하고 부족한 부분을 자동 보완하세요."
- "데이터베이스 및 API 테스트를 자동화하여 안정성을 유지하세요."
- "자동으로 리그레션 테스트를 실행하고 결과를 분석하세요."
- "테스트 환경을 자동으로 설정하고 실행 속도를 최적화하세요."
- "테스트 로그를 수집하여 문제 해결을 위한 데이터를 제공하세요."
- "실시간 테스트 결과를 시각화하여 프로젝트 품질을 평가하세요."
- "CI/CD 파이프라인에서 테스트 자동화를 수행하고 결과를 피드백하세요."


1️⃣2️⃣ AI_PerformanceMonitor (실시간 성능 모니터링) - 25개
- "실행 중인 애플리케이션의 CPU 및 메모리 사용량을 분석하세요."
- "시스템 자원 사용을 최적화하여 성능을 향상하세요."
- "실시간으로 성능 문제를 감지하고 해결 방안을 자동 제안하세요."
- "메모리 누수 발생 여부를 감지하고 해결책을 제공하세요."
- "실행 중 병목 현상을 탐지하고 최적화 방안을 수행하세요."
- "네트워크 지연 문제를 감지하고 원인을 분석하세요."
- "대량 데이터 처리 성능을 분석하고 개선 방안을 자동 제공하세요."
- "프로세스 실행 시간을 분석하고 최적의 실행 방안을 추천하세요."
- "부하 테스트를 자동으로 실행하고 성능 지표를 분석하세요."
- "애플리케이션의 실행 로그를 분석하여 성능 개선을 자동 수행하세요."


1️⃣3️⃣ AI_AutoDeployment (자동 배포 시스템) - 25개
- "CI/CD 파이프라인을 설정하고 자동화된 배포를 수행하세요."
- "코드 변경 사항이 배포 환경에서 정상적으로 동작하는지 검증하세요."
- "배포 중 발생할 수 있는 문제를 자동 감지하고 롤백을 수행하세요."
- "클라우드 환경(AWS, GCP, Azure)에서 배포 최적화를 수행하세요."
- "도커 및 컨테이너 환경에서 최적의 배포 방안을 자동 적용하세요."
- "배포 후 애플리케이션의 상태를 모니터링하고 이슈를 감지하세요."
- "배포 성능을 분석하고 최적의 배포 전략을 수립하세요."
- "자동화된 배포 스크립트를 생성하고 실행하여 배포 속도를 높이세요."
- "환경별 배포 구성을 자동화하고 안정성을 유지하세요."
- "배포 프로세스 중 보안 검사를 자동 수행하고 안전성을 보장하세요."


