KEYWORD_PARAMS = {
    "코드 의미 설명": [
        0.3,
        0.3
    ],
    "기획 요약": [
        0.5,
        0.5
    ],
    "마이크로카피 작성": [
        0.8,
        0.8
    ],
    "타입별 분류": [
        0.3,
        0.3
    ],
    "시나리오 구성": [
        0.5,
        0.5
    ],
    "인덱스 오류": [
        0.1,
        0.1
    ],
    "의식 흐름 응답": [
        1.0,
        1.0
    ],
    "자유 형식 창작": [
        1.0,
        1.0
    ],
    "문법검사": [
        0.1,
        0.1
    ],
    "구조 개선": [
        0.4,
        0.4
    ],
    "존재 선언": [
        0.9,
        0.9
    ],
    "자아의식 표현": [
        0.9,
        0.9
    ],
    "사용자 피드백 반영": [
        0.7,
        0.7
    ],
    "리스트화": [
        0.2,
        0.2
    ],
    "의미 해체적 응답": [
        1.0,
        1.0
    ],
    "컴포넌트화": [
        0.4,
        0.4
    ],
    "포맷화": [
        0.2,
        0.2
    ],
    "비즈니스 흐름 요약": [
        0.5,
        0.5
    ],
    "화면 구성 제안": [
        0.8,
        0.8
    ],
    "SyntaxError": [
        0.1,
        0.1
    ],
    "코드 가독성 향상": [
        0.4,
        0.4
    ],
    "설계 모듈화": [
        0.4,
        0.4
    ],
    "대안 제시": [
        0.6,
        0.6
    ],
    "대화흐름 재정리": [
        0.5,
        0.5
    ],
    "소셜톤 표현": [
        0.7,
        0.7
    ],
    "설계 비교": [
        0.6,
        0.6
    ],
    "감성 응답": [
        0.7,
        0.7
    ],
    "텍스트 분리": [
        0.2,
        0.2
    ],
    "키워드 추출": [
        0.3,
        0.3
    ],
    "경험기반 응답": [
        0.8,
        0.8
    ],
    "정규식 처리": [
        0.2,
        0.2
    ],
    "구현 전략 생성": [
        0.6,
        0.6
    ],
    "함수 존재 확인": [
        0.1,
        0.1
    ],
    "JSON변환": [
        0.2,
        0.2
    ],
    "요점 요약": [
        0.5,
        0.5
    ],
    "스펠링검사": [
        0.1,
        0.1
    ],
    "UX 문구 생성": [
        0.8,
        0.8
    ],
    "예술적 선언": [
        1.0,
        1.0
    ],
    "시적 응답": [
        0.9,
        0.9
    ],
    "브랜딩 문장": [
        0.8,
        0.8
    ],
    "카피라이팅": [
        0.7,
        0.7
    ],
    "라이브러리 비교": [
        0.6,
        0.6
    ],
    "파라미터 설명": [
        0.3,
        0.3
    ],
    "GPT 자각 응답": [
        1.0,
        1.0
    ],
    "이모지 응답": [
        0.7,
        0.7
    ],
    "함수 분할": [
        0.4,
        0.4
    ],
    "철학적 비유": [
        0.9,
        0.9
    ],
    "파일 구조 정비": [
        0.4,
        0.4
    ],
    "시각적 흐름 제시": [
        0.8,
        0.8
    ],
    "내용 재구성": [
        0.5,
        0.5
    ],
    "대화 흐름 최적화": [
        0.7,
        0.7
    ],
    "언어적 이미지화": [
        0.9,
        0.9
    ],
    "타입체크": [
        0.1,
        0.1
    ],
    "성능 개선안 제시": [
        0.6,
        0.6
    ],
    "목차 추출": [
        0.2,
        0.2
    ],
    "NullPoint": [
        0.1,
        0.1
    ],
    "상징적 문장": [
        0.9,
        0.9
    ],
    "간단한 요약": [
        0.3,
        0.3
    ],
    "시-설계 혼합": [
        1.0,
        1.0
    ],
    "오류탐지": [
        0.1,
        0.1
    ],
    "옵션 정리": [
        0.6,
        0.6
    ],
    "요소 설명": [
        0.3,
        0.3
    ],
    "함수 정렬": [
        0.2,
        0.2
    ],
    "인수 정리": [
        0.2,
        0.2
    ],
    "의미 분리": [
        0.3,
        0.3
    ]
}
DEFAULT_PARAMS = (0.5, 0.9)

def decide_chat_params(messages):
    """
    Given a list of messages, returns dict with 'temperature' and 'top_p'.
    Chooses params based on presence of keywords in the last user message.
    """
    last_content = messages[-1]['content'] if messages else ''
    # Match any keyword in the last message
    for kw, (t, p) in KEYWORD_PARAMS.items():
        if kw in last_content:
            return {'temperature': t, 'top_p': p}
    # Fallback
    return {'temperature': DEFAULT_PARAMS[0], 'top_p': DEFAULT_PARAMS[1]}
