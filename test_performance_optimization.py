#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EORA AI ÏÑ±Îä• ÏµúÏ†ÅÌôî ÌÖåÏä§Ìä∏
API ÏùëÎãµÏÜçÎèÑ Ìñ•ÏÉÅ Ìö®Í≥º Ï∏°Ï†ï
"""

import sys
import asyncio
import time
import requests
import statistics
import json
from typing import List, Dict, Any
from concurrent.futures import ThreadPoolExecutor, as_completed

# ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÎ°ú Ï∂îÍ∞Ä
sys.path.append('src')

class PerformanceTester:
    """ÏÑ±Îä• ÌÖåÏä§Ìä∏ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self):
        self.base_url = "http://127.0.0.1:8300"
        self.test_results = {
            'response_times': [],
            'cache_hits': 0,
            'total_requests': 0,
            'errors': 0,
            'slow_requests': 0
        }
        
        # ÌÖåÏä§Ìä∏Ïö© Î©îÏãúÏßÄÎì§
        self.test_messages = [
            "ÏïàÎÖïÌïòÏÑ∏Ïöî! **EORA AI** ÏÑ±Îä• ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§.",
            "Ïñ¥Ï†ú **Python**ÏùÑ Î∞∞Ïõ†Ïñ¥Ïöî. Ïñ¥ÎñªÍ≤å ÌôúÏö©Ìï† Ïàò ÏûàÏùÑÍπåÏöî?",
            "# ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç\n\n- Î≥ÄÏàò\n- Ìï®Ïàò\n- ÌÅ¥ÎûòÏä§",
            "Í∑∏Ï†ÄÍªò `ÏΩîÎî©` Í≥µÎ∂ÄÎ•º ÌñàÏäµÎãàÎã§. *Î≥µÏäµ*Ïù¥ ÌïÑÏöîÌï¥Ïöî.",
            "Ïò§Îäò AIÏôÄ ÎåÄÌôîÌïòÍ∏∞ Ïû¨ÎØ∏ÏûàÎÑ§Ïöî!",
            "ÏùºÏ£ºÏùºÏ†ÑÏóê ÏãúÏûëÌïú ÌîÑÎ°úÏ†ùÌä∏Î•º Í≥ÑÏÜçÌï¥Î≥ºÍπåÏöî?",
            "```python\nprint('Hello World')\n```",
            "ÏÉàÎ°úÏö¥ Í∏∞Ïà†ÏùÑ Î∞∞Ïö∞Îäî Í≤ÉÏùÄ **Ìù•ÎØ∏Î°≠ÏäµÎãàÎã§**.",
            "ÏßÄÎÇúÎã¨Î∂ÄÌÑ∞ Í∞úÎ∞ú Í≥µÎ∂ÄÎ•º ÏãúÏûëÌñàÏñ¥Ïöî.",
            "ÏïÑÏπ®Ïóê ÏΩîÎî©ÌïòÎäî Í≤ÉÏù¥ *Ìö®Ïú®Ï†Å*Ïù∏ Í≤É Í∞ôÏïÑÏöî."
        ]
    
    def check_server_status(self) -> bool:
        """ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏"""
        try:
            response = requests.get(f"{self.base_url}/", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def login_admin(self) -> Dict[str, str]:
        """Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏"""
        try:
            # ÏÑ∏ÏÖò Ïø†ÌÇ§ Í∞ÄÏ†∏Ïò§Í∏∞
            session = requests.Session()
            
            # Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ Ï†ëÏÜç
            login_page = session.get(f"{self.base_url}/login")
            
            # Î°úÍ∑∏Ïù∏ ÏãúÎèÑ (Ìèº Îç∞Ïù¥ÌÑ∞)
            login_data = {
                'email': 'admin@eora.ai',
                'password': 'admin123'
            }
            
            # POST Î∞©Ïãù ÎåÄÏã† ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞Î°ú ÏãúÎèÑ
            login_response = session.get(
                f"{self.base_url}/login",
                params=login_data
            )
            
            if login_response.status_code == 200:
                return {'session_cookie': session.cookies.get_dict()}
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è Î°úÍ∑∏Ïù∏ Ïã§Ìå®: {e}")
            return None
    
    def create_test_session(self, auth_data: Dict) -> str:
        """ÌÖåÏä§Ìä∏Ïö© ÏÑ∏ÏÖò ÏÉùÏÑ±"""
        try:
            session = requests.Session()
            if auth_data and 'session_cookie' in auth_data:
                session.cookies.update(auth_data['session_cookie'])
            
            # ÏÑ∏ÏÖò ÏÉùÏÑ± ÏãúÎèÑ
            session_response = session.post(f"{self.base_url}/api/sessions", json={
                'name': 'Performance Test Session'
            })
            
            if session_response.status_code == 200:
                data = session_response.json()
                return data.get('session_id', 'test_session_001')
            else:
                return 'test_session_001'  # Í∏∞Î≥∏ ÏÑ∏ÏÖò ID
                
        except Exception as e:
            print(f"‚ö†Ô∏è ÏÑ∏ÏÖò ÏÉùÏÑ± Ïã§Ìå®: {e}")
            return 'test_session_001'
    
    def measure_response_time(self, message: str, session_id: str, auth_data: Dict = None) -> Dict[str, Any]:
        """Îã®Ïùº ÏöîÏ≤≠ ÏùëÎãµÏãúÍ∞Ñ Ï∏°Ï†ï"""
        try:
            session = requests.Session()
            if auth_data and 'session_cookie' in auth_data:
                session.cookies.update(auth_data['session_cookie'])
            
            start_time = time.time()
            
            # Ï±ÑÌåÖ API Ìò∏Ï∂ú
            response = session.post(
                f"{self.base_url}/api/chat",
                json={
                    'message': message,
                    'session_id': session_id
                },
                timeout=30
            )
            
            end_time = time.time()
            response_time = end_time - start_time
            
            if response.status_code == 200:
                data = response.json()
                return {
                    'success': True,
                    'response_time': response_time,
                    'has_markdown': data.get('has_markdown', False),
                    'cache_hit': 'cache' in str(response.headers).lower(),
                    'response_size': len(str(data.get('response', ''))),
                    'status_code': response.status_code
                }
            else:
                return {
                    'success': False,
                    'response_time': response_time,
                    'error': f"HTTP {response.status_code}",
                    'status_code': response.status_code
                }
                
        except Exception as e:
            return {
                'success': False,
                'response_time': 30.0,  # ÌÉÄÏûÑÏïÑÏõÉÏúºÎ°ú Í∞ÑÏ£º
                'error': str(e),
                'status_code': 0
            }
    
    def run_sequential_test(self, num_requests: int = 10) -> Dict[str, Any]:
        """ÏàúÏ∞® ÏöîÏ≤≠ ÌÖåÏä§Ìä∏"""
        print(f"üîÑ ÏàúÏ∞® ÏöîÏ≤≠ ÌÖåÏä§Ìä∏ ÏãúÏûë ({num_requests}Ìöå)...")
        
        # Î°úÍ∑∏Ïù∏ Î∞è ÏÑ∏ÏÖò ÏÉùÏÑ±
        auth_data = self.login_admin()
        session_id = self.create_test_session(auth_data)
        
        results = []
        
        for i in range(num_requests):
            message = self.test_messages[i % len(self.test_messages)]
            result = self.measure_response_time(message, session_id, auth_data)
            results.append(result)
            
            print(f"  ÏöîÏ≤≠ {i+1}/{num_requests}: {result['response_time']:.3f}Ï¥à "
                  f"({'ÏÑ±Í≥µ' if result['success'] else 'Ïã§Ìå®'})")
            
            # ÏàúÏ∞® ÏöîÏ≤≠Ïù¥ÎØÄÎ°ú Ïû†Ïãú ÎåÄÍ∏∞
            time.sleep(0.1)
        
        return self.analyze_results(results, "ÏàúÏ∞® ÏöîÏ≤≠")
    
    def run_concurrent_test(self, num_requests: int = 20, max_workers: int = 5) -> Dict[str, Any]:
        """ÎèôÏãú ÏöîÏ≤≠ ÌÖåÏä§Ìä∏"""
        print(f"üöÄ ÎèôÏãú ÏöîÏ≤≠ ÌÖåÏä§Ìä∏ ÏãúÏûë ({num_requests}Ìöå, ÎèôÏãú {max_workers}Í∞ú)...")
        
        # Î°úÍ∑∏Ïù∏ Î∞è ÏÑ∏ÏÖò ÏÉùÏÑ±
        auth_data = self.login_admin()
        session_id = self.create_test_session(auth_data)
        
        results = []
        
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            # ÏöîÏ≤≠ Ï†úÏ∂ú
            futures = []
            for i in range(num_requests):
                message = self.test_messages[i % len(self.test_messages)]
                future = executor.submit(self.measure_response_time, message, session_id, auth_data)
                futures.append(future)
            
            # Í≤∞Í≥º ÏàòÏßë
            for i, future in enumerate(as_completed(futures)):
                result = future.result()
                results.append(result)
                print(f"  ÏöîÏ≤≠ ÏôÑÎ£å {len(results)}/{num_requests}: {result['response_time']:.3f}Ï¥à "
                      f"({'ÏÑ±Í≥µ' if result['success'] else 'Ïã§Ìå®'})")
        
        return self.analyze_results(results, "ÎèôÏãú ÏöîÏ≤≠")
    
    def run_cache_test(self, num_requests: int = 10) -> Dict[str, Any]:
        """Ï∫êÏãú Ìö®Í≥º ÌÖåÏä§Ìä∏"""
        print(f"üíæ Ï∫êÏãú Ìö®Í≥º ÌÖåÏä§Ìä∏ ÏãúÏûë ({num_requests}Ìöå)...")
        
        # Î°úÍ∑∏Ïù∏ Î∞è ÏÑ∏ÏÖò ÏÉùÏÑ±
        auth_data = self.login_admin()
        session_id = self.create_test_session(auth_data)
        
        # ÎèôÏùºÌïú Î©îÏãúÏßÄÎ°ú Î∞òÎ≥µ ÏöîÏ≤≠
        test_message = "Ï∫êÏãú ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄÏûÖÎãàÎã§. **ÎèôÏùºÌïú ÏöîÏ≤≠**ÏúºÎ°ú *Ï∫êÏãú Ìö®Í≥º*Î•º ÌôïÏù∏Ìï©ÎãàÎã§."
        
        results = []
        cache_hits = 0
        
        for i in range(num_requests):
            result = self.measure_response_time(test_message, session_id, auth_data)
            results.append(result)
            
            if result.get('cache_hit', False):
                cache_hits += 1
            
            print(f"  ÏöîÏ≤≠ {i+1}/{num_requests}: {result['response_time']:.3f}Ï¥à "
                  f"({'Ï∫êÏãú ÌûàÌä∏' if result.get('cache_hit') else 'Ï∫êÏãú ÎØ∏Ïä§'})")
            
            # Ï∫êÏãú Ìö®Í≥ºÎ•º Î≥¥Í∏∞ ÏúÑÌï¥ ÏïΩÍ∞Ñ ÎåÄÍ∏∞
            time.sleep(0.2)
        
        analysis = self.analyze_results(results, "Ï∫êÏãú Ìö®Í≥º")
        analysis['cache_hit_rate'] = (cache_hits / num_requests) * 100
        
        return analysis
    
    def analyze_results(self, results: List[Dict[str, Any]], test_type: str) -> Dict[str, Any]:
        """Í≤∞Í≥º Î∂ÑÏÑù"""
        successful_results = [r for r in results if r['success']]
        response_times = [r['response_time'] for r in successful_results]
        
        if not response_times:
            return {
                'test_type': test_type,
                'total_requests': len(results),
                'successful_requests': 0,
                'success_rate': 0.0,
                'avg_response_time': 0.0,
                'median_response_time': 0.0,
                'min_response_time': 0.0,
                'max_response_time': 0.0,
                'std_deviation': 0.0,
                'slow_requests': 0,
                'fast_requests': 0,
                'error': 'No successful requests'
            }
        
        analysis = {
            'test_type': test_type,
            'total_requests': len(results),
            'successful_requests': len(successful_results),
            'success_rate': (len(successful_results) / len(results)) * 100,
            'avg_response_time': statistics.mean(response_times),
            'median_response_time': statistics.median(response_times),
            'min_response_time': min(response_times),
            'max_response_time': max(response_times),
            'std_deviation': statistics.stdev(response_times) if len(response_times) > 1 else 0,
            'slow_requests': len([t for t in response_times if t > 2.0]),
            'fast_requests': len([t for t in response_times if t < 0.5])
        }
        
        return analysis
    
    def get_server_performance_stats(self) -> Dict[str, Any]:
        """ÏÑúÎ≤Ñ ÏÑ±Îä• ÌÜµÍ≥Ñ Ï°∞Ìöå"""
        try:
            auth_data = self.login_admin()
            if not auth_data:
                return None
            
            session = requests.Session()
            session.cookies.update(auth_data['session_cookie'])
            
            response = session.get(f"{self.base_url}/api/performance/stats")
            
            if response.status_code == 200:
                return response.json().get('stats', {})
            else:
                return None
                
        except Exception as e:
            print(f"‚ö†Ô∏è ÏÑ±Îä• ÌÜµÍ≥Ñ Ï°∞Ìöå Ïã§Ìå®: {e}")
            return None
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """Ï¢ÖÌï© ÏÑ±Îä• ÌÖåÏä§Ìä∏"""
        print("üß™ EORA AI ÏÑ±Îä• ÏµúÏ†ÅÌôî Ï¢ÖÌï© ÌÖåÏä§Ìä∏")
        print("=" * 70)
        
        # ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏
        if not self.check_server_status():
            return {
                'error': 'ÏÑúÎ≤ÑÍ∞Ä Ïã§ÌñâÎêòÏßÄ ÏïäÍ≥† ÏûàÏäµÎãàÎã§. ÏÑúÎ≤ÑÎ•º Î®ºÏ†Ä Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.',
                'success': False
            }
        
        print("‚úÖ ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏ ÏôÑÎ£å")
        
        test_results = {}
        
        # 1. ÏàúÏ∞® ÏöîÏ≤≠ ÌÖåÏä§Ìä∏
        test_results['sequential'] = self.run_sequential_test(10)
        
        # 2. ÎèôÏãú ÏöîÏ≤≠ ÌÖåÏä§Ìä∏
        test_results['concurrent'] = self.run_concurrent_test(15, 3)
        
        # 3. Ï∫êÏãú Ìö®Í≥º ÌÖåÏä§Ìä∏
        test_results['cache'] = self.run_cache_test(8)
        
        # 4. ÏÑúÎ≤Ñ ÏÑ±Îä• ÌÜµÍ≥Ñ
        server_stats = self.get_server_performance_stats()
        if server_stats:
            test_results['server_stats'] = server_stats
        
        return test_results
    
    def print_results(self, results: Dict[str, Any]):
        """Í≤∞Í≥º Ï∂úÎ†•"""
        print("\n" + "=" * 70)
        print("üìä ÏÑ±Îä• ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ")
        print("=" * 70)
        
        if 'error' in results:
            print(f"‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìå®: {results['error']}")
            return
        
        # Í∞Å ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï∂úÎ†•
        for test_name, test_data in results.items():
            if test_name == 'server_stats':
                continue
                
            print(f"\nüîç {test_data['test_type']} Í≤∞Í≥º:")
            print(f"  Ï¥ù ÏöîÏ≤≠: {test_data['total_requests']}Í∞ú")
            print(f"  ÏÑ±Í≥µ ÏöîÏ≤≠: {test_data['successful_requests']}Í∞ú")
            print(f"  ÏÑ±Í≥µÎ•†: {test_data['success_rate']:.1f}%")
            print(f"  ÌèâÍ∑† ÏùëÎãµÏãúÍ∞Ñ: {test_data['avg_response_time']:.3f}Ï¥à")
            print(f"  Ï§ëÍ∞ÑÍ∞í ÏùëÎãµÏãúÍ∞Ñ: {test_data['median_response_time']:.3f}Ï¥à")
            print(f"  ÏµúÎã® ÏùëÎãµÏãúÍ∞Ñ: {test_data['min_response_time']:.3f}Ï¥à")
            print(f"  ÏµúÏû• ÏùëÎãµÏãúÍ∞Ñ: {test_data['max_response_time']:.3f}Ï¥à")
            print(f"  Îπ†Î•∏ ÏöîÏ≤≠ (0.5Ï¥à ÎØ∏Îßå): {test_data['fast_requests']}Í∞ú")
            print(f"  ÎäêÎ¶∞ ÏöîÏ≤≠ (2Ï¥à Ïù¥ÏÉÅ): {test_data['slow_requests']}Í∞ú")
            
            if 'cache_hit_rate' in test_data:
                print(f"  Ï∫êÏãú ÌûàÌä∏Ïú®: {test_data['cache_hit_rate']:.1f}%")
        
        # ÏÑúÎ≤Ñ ÌÜµÍ≥Ñ
        if 'server_stats' in results:
            stats = results['server_stats']
            print(f"\nüìà ÏÑúÎ≤Ñ ÏÑ±Îä• ÌÜµÍ≥Ñ:")
            print(f"  Ï¥ù Ï≤òÎ¶¨Îêú ÏöîÏ≤≠: {stats.get('total_requests', 0)}Í∞ú")
            print(f"  Ï∫êÏãú ÌûàÌä∏: {stats.get('cache_hits', 0)}Í∞ú")
            print(f"  Ï∫êÏãú ÌûàÌä∏Ïú®: {stats.get('cache_hit_rate', 0):.1f}%")
            print(f"  ÌèâÍ∑† ÏùëÎãµÏãúÍ∞Ñ: {stats.get('avg_response_time', 0):.3f}Ï¥à")
            print(f"  ÎäêÎ¶∞ ÏöîÏ≤≠ ÎπÑÏú®: {stats.get('slow_request_rate', 0):.1f}%")
        
        # Ï¢ÖÌï© ÌèâÍ∞Ä
        print(f"\nüéØ Ï¢ÖÌï© ÌèâÍ∞Ä:")
        avg_response_times = []
        success_rates = []
        
        for test_name, test_data in results.items():
            if test_name != 'server_stats' and 'avg_response_time' in test_data:
                avg_response_times.append(test_data['avg_response_time'])
                success_rates.append(test_data['success_rate'])
        
        if avg_response_times:
            overall_avg = statistics.mean(avg_response_times)
            overall_success = statistics.mean(success_rates)
            
            print(f"  Ï†ÑÏ≤¥ ÌèâÍ∑† ÏùëÎãµÏãúÍ∞Ñ: {overall_avg:.3f}Ï¥à")
            print(f"  Ï†ÑÏ≤¥ ÌèâÍ∑† ÏÑ±Í≥µÎ•†: {overall_success:.1f}%")
            
            # ÏÑ±Îä• Îì±Í∏â Îß§Í∏∞Í∏∞
            if overall_avg < 0.5 and overall_success > 95:
                grade = "S (Îß§Ïö∞ Ïö∞Ïàò)"
            elif overall_avg < 1.0 and overall_success > 90:
                grade = "A (Ïö∞Ïàò)"
            elif overall_avg < 2.0 and overall_success > 85:
                grade = "B (ÏñëÌò∏)"
            elif overall_avg < 3.0 and overall_success > 80:
                grade = "C (Î≥¥ÌÜµ)"
            else:
                grade = "D (Í∞úÏÑ† ÌïÑÏöî)"
            
            print(f"  ÏÑ±Îä• Îì±Í∏â: {grade}")
        
        print("=" * 70)


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    tester = PerformanceTester()
    
    print("üöÄ EORA AI API ÏùëÎãµÏÜçÎèÑ ÏµúÏ†ÅÌôî ÌÖåÏä§Ìä∏")
    print("Ïù¥ ÌÖåÏä§Ìä∏Îäî ÏµúÏ†ÅÌôî Ï†ÑÌõÑÏùò ÏÑ±Îä•ÏùÑ ÎπÑÍµêÌï©ÎãàÎã§.")
    print("-" * 70)
    
    # Ï¢ÖÌï© ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    results = tester.run_comprehensive_test()
    
    # Í≤∞Í≥º Ï∂úÎ†•
    tester.print_results(results)
    
    # Í≤∞Í≥ºÎ•º ÌååÏùºÎ°ú Ï†ÄÏû•
    try:
        with open('performance_test_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ ÌÖåÏä§Ìä∏ Í≤∞Í≥ºÍ∞Ä 'performance_test_results.json'Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")
    except Exception as e:
        print(f"‚ö†Ô∏è Í≤∞Í≥º Ï†ÄÏû• Ïã§Ìå®: {e}")
    
    return results


if __name__ == "__main__":
    results = main()
    
    # ÏÑ±Îä• Í∏∞Ï§Ä ÌÜµÍ≥º Ïó¨Î∂Ä ÌôïÏù∏
    if 'error' not in results:
        avg_times = []
        for test_name, test_data in results.items():
            if test_name != 'server_stats' and 'avg_response_time' in test_data:
                avg_times.append(test_data['avg_response_time'])
        
        if avg_times:
            overall_avg = statistics.mean(avg_times)
            if overall_avg < 2.0:  # 2Ï¥à ÎØ∏ÎßåÏù¥Î©¥ ÌÜµÍ≥º
                print("\nüéâ ÏÑ±Îä• ÏµúÏ†ÅÌôî ÌÖåÏä§Ìä∏ ÌÜµÍ≥º! Î∞∞Ìè¨ Ï§ÄÎπÑ ÏôÑÎ£å!")
                exit(0)
            else:
                print(f"\n‚ö†Ô∏è ÏÑ±Îä• Í∏∞Ï§Ä ÎØ∏Îã¨ (ÌèâÍ∑† {overall_avg:.3f}Ï¥à > 2.0Ï¥à)")
                exit(1)
    
    exit(1) 